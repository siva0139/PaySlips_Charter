1.BaseClass
***************
package com.automation.testNG.Demo;


import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Date;
import java.util.Properties;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;


public class BaseBaseBase {

/*	Implementation of
 * 
 * 1.Log4J
 * 2.TestNGParameters @Parameters("browser")
 * 3.TestNG @Optional
 * 4.readDataFromExcel
 * 5.Get Data from properties File 
 * 6.ScreenShot
 * 7.Retry Logic
 * 
 * 
 * */
	
	public static WebDriver driver;
	public static XSSFWorkbook wb;
	public static XSSFSheet sheet;
    public static int num;
	
	public static String timeStamp = BaseBaseBase.timeStamp().replace(" ", "_").replace(":", "_").replace(".", "_");
	
	 private static final Logger logger = Logger.getLogger(BaseBaseBase.class.getName());
 
	 @BeforeTest
	 public void log4J() {
		 
		 String log4jPath=System.getProperty("user.dir")+"/log4j.properties";
		 PropertyConfigurator.configure(log4jPath);
	
	 }
	 
	@Parameters("browser")
	@BeforeMethod
	public static void launchBrowser(@Optional("chrome") String browser) {
		       
		if(browser.equals("chrome")) {
			
			System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"/Drivers/chromedriver.exe");
			
			driver = new ChromeDriver();
			logger.info("Chrome Browser is launched");
		
		}

		else if(browser.equals("firefox")) {
			
              System.setProperty("webdriver.gecko.driver", System.getProperty("user.dir")+"/Drivers/geckodriver.exe");
            
			driver = new FirefoxDriver();
			  logger.info("Chrome Browser is launched");
			
			
		}
		
		driver.manage().window().maximize();
		logger.info("Browser is maximised");
	}
	
	
	@AfterMethod
	public static void tearDown() {
		
		
		driver.close();
		
		logger.info("Browser is closed");
	}

	public static String readDataFromExcel(String path ,String SheetName, int row, int col) {
		
		try {
			File f = new File(path);

			FileInputStream fis = new FileInputStream(f);

			wb = new XSSFWorkbook(fis);

			sheet = wb.getSheetAt(0);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		int index = wb.getSheetIndex(SheetName);

		sheet = wb.getSheetAt(index);

		String data = sheet.getRow(row).getCell(col).getStringCellValue();

		return data;
	}

	public static String getConfigData(String Key)
	   {

		String value=null ;
		
		try {
		FileInputStream fis = new FileInputStream(System.getProperty("user.dir") + "/config.properties");

		Properties pro = new Properties();

		pro.load(fis);

		value = pro.getProperty(Key);
		
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
			
		}
		
		return value;
		
	}

	public static String timeStamp() {

	
		Date today = new Date();
		return new java.sql.Timestamp(today.getTime()).toString();
		
	}
	
	public static void screenshot() throws IOException {

		num++;
		File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        FileUtils.copyFile(scrFile, new File(System.getProperty("user.dir")+"/ScreenShots/"+timeStamp+"_"+num+".png"));
        logger.info("Screen shot is taken");
		num++;
	}

	
}
*************************************************************************
2.PageFactoryDemo
*****************
package com.automation.testNG.Demo;

import java.io.IOException;
import org.apache.log4j.Logger;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;


public class PageFactoryDemo extends BaseBaseBase {

	private static final Logger logger = Logger.getLogger(PageFactoryDemo.class.getName());
	
	@FindBy(xpath = "//input[@name='username']")
	WebElement username;

	@FindBy(xpath = "//input[@name='password']")
	WebElement password;

	@FindBy(xpath = ".//*[@type='submit']")
	WebElement submitbutton;

	

	public PageFactoryDemo() {

		PageFactory.initElements(driver, this);

	}

	
	public void login(String usernamev,String passwordv) throws IOException, InterruptedException {
       
		Thread.sleep(2000);
		username.sendKeys(usernamev);
		logger.info("UserName is entered");
		password.sendKeys(passwordv);
		logger.info("Password is entered");
		submitbutton.click();
		logger.info("Submit button is clicked");
	
		
	   /*driver.findElement(By.xpath("//input[@name='username']")).sendKeys("usernamev");
	    driver.findElement(By.xpath("//input[@name='password']")).sendKeys("passwordv");
	    driver.findElement(By.xpath(".//*[@type='submit']")).click();
	    */
	
	}
	
	
}
****************************************************************************************
3.TestClass
************
package com.automation.testNG.Demo;

import java.io.IOException;
import org.testng.annotations.Test;
import org.apache.log4j.Logger;
import org.junit.Assert;

public class Login extends PageFactoryDemo{
  
	 private static final Logger logger = Logger.getLogger(Login.class.getName());
    
	
	 public Login() {
		 super();
	 }
	
	    String username1 ="praneethmanala"; //readDataFromExcel("E:/DataDriven.xlsx", "CRM", 1, 0);
		String password1 ="praneethmanala";// readDataFromExcel("E:/DataDriven.xlsx", "CRM", 1, 1);
		String url = getConfigData("url");

		@Test
	public void test() throws IOException, InterruptedException  {
			
		Login obj= new Login();
		System.out.println("The UserName :"+ username1+" and " +"The Password  :"+password1);
		driver.get(url);
	 	logger.info("Url is entered");
		screenshot();
		Thread.sleep(2000);
		screenshot();
		obj.login(username1, password1);
		Thread.sleep(2000);
		screenshot();
		Thread.sleep(2000);
		screenshot();
		Assert.assertTrue(false);
		
	}
	
}
**************************************************************************************
